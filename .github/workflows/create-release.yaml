name: create release

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Release name ( e.g. "2.1.3" )'
        default: ""
        required: true
      latest_release:
        description: 'Latest release'
        type: boolean
        default: false

permissions: # used by build images steps
  id-token: write # This is required for requesting the JWT token
  contents: write # This is required for actions/checkout


jobs:
  upgrade-images:
    name: Upgrade main images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.BOT_TOKEN }}
          fetch-depth: 0

      - name: Bump version
        run: |
          ./.github/scripts/upgrade-operator-kustomize.sh
          ./.github/scripts/upgrade-chart-version.sh
        env:
          IMG: "europe-docker.pkg.dev/kyma-project/prod/dockerregistry-operator:${{ github.event.inputs.name }}"
          MODULE_VERSION: ${{ github.event.inputs.name }}

      - name: Bump sec-scanners-config.yaml based on values.yaml
        run: ./.github/scripts/upgrade-sec-scanners-config.sh
        env:
          IMG_VERSION: ${{ github.event.inputs.name }}
      
      - name: Commit&Push
        run: |
          git config --local user.email "team-otters@sap.com"
          git config --local user.name "ottersbot"

          git add .
          git commit --allow-empty -m "upgrade dependencies"
          git push origin ${{ github.ref_name }}

  create-tag:
    name: Create tag
    needs: upgrade-images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }}  # Checkout to latest branch changes

      - name: Create tag
        run: |
          git tag ${{ github.event.inputs.name }}
          git push origin ${{ github.event.inputs.name }}

  builds:
    needs: create-tag
    uses: ./.github/workflows/_build.yaml
    with:
      tag: "${{ github.event.inputs.name }}"

  create-draft:
    name: Create draft release
    needs: [builds]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref_name }} # checkout to latest branch changes ( by default this action checkouts to the SHA that triggers action )

      - name: Create changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./.github/scripts/create-changelog.sh ${{ github.event.inputs.name }}

      - name: Create draft release
        id: create-draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RELEASE_ID=$(./.github/scripts/create-draft-release.sh ${{ github.event.inputs.name }})
          echo "release_id=$RELEASE_ID" >> $GITHUB_OUTPUT

      - name: Create release assets
        id: create-assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ steps.create-draft.outputs.release_id }}
        run: ./.github/scripts/release.sh

    outputs:
      release_id: ${{ steps.create-draft.outputs.release_id }}

  integrations:
    needs: create-draft
    secrets: inherit
    uses: ./.github/workflows/_integration-tests.yaml
    with:
      image: europe-docker.pkg.dev/kyma-project/prod/dockerregistry-operator:${{ github.event.inputs.name }}
      trigger_btp: true

  publish-release:
    name: Publish release
    needs: [integrations, create-draft]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.name }} # checkout to latest branch changes ( by default this action checkouts to the SHA that triggers action )

      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./.github/scripts/publish-release.sh ${{ needs.create-draft.outputs.release_id }} ${{ github.event.inputs.latest_release }}

  upload-community-module-template:
    name: Upload community module-template
    needs: [create-draft, publish-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.name }} # checkout to latest branch changes ( by default this action checkouts to the SHA that triggers action )

      - uses: ./.github/actions/setup-modulectl
        with:
          path: "/usr/local/bin"

      - name: Render community module-config
        env:
          MODULE_VERSION: ${{ github.event.inputs.name }}
        run: |
          make community-module-config
          echo "==== community-module-config ==="
          cat module-config.yaml

      - name: Generate community module template
        run: |
          # dev registry is used because even if --dry-run is set, the cli expects the --registry flag to check connection
          modulectl create -c module-config.yaml --registry https://europe-docker.pkg.dev/kyma-project/dev --dry-run -o module-template.yaml
          echo "==== module-template ==="
          cat module-template.yaml

      - name: Publish module-template
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Uploading module-template.yaml to release ${{ github.event.inputs.name }} with ID ${{ needs.create-draft.outputs.release_id }}"
          response=$(curl -s -w "%{http_code}" \
            --request POST --data-binary @"module-template.yaml" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: text/yaml" \
            "https://uploads.github.com/repos/kyma-project/docker-registry/releases/${{ needs.create-draft.outputs.release_id }}/assets?name=community-module-template.yaml")
          
          if [[ "$response" != "201" ]]; then
            echo "Unable to upload the community-module-template.yaml file."
            echo "HTTP Status: $response"
            cat output.txt
            exit 1
          else
            echo "community-module-template.yaml uploaded"
          fi
